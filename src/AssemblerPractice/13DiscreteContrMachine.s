; Объявить кодовую секцию MyCode
				AREA MyCode13, CODE, ReadOnly
; Объявить точку входа в программу приложения	
				ENTRY
; Объвить точку входа глобальной переменной
				EXPORT DiscreteContrMachine
DiscreteContrMachine
; Программная реализация дискретного управляющего 
; автомата (главный привод продольно-строгального станка)
; Инициализация 
; Установить начальное состояние автомата N=0 
; Вывести управляющее воздействие Y = 0
				MOV r1,#0
				LDR r0,=N
				STRD r1, r1,[r0]	; Сохранить сразу два слова N,Y

; Основная программа дискретного управляющего автомата 
; Вызывается с частотой дискретизации системы управления
DISK_AVT
; Получить текущий вектор входных битовых переменных X 
; и сохранить в регистре r1
; Получить текущий номер состояния автомата и
; сохранить в регистре r2
				LDR r0,=X
				LDRD r1,r2,[r0]		; Получить сразу два слова X,N
				
; Загрузить в регистр r0 адрес таблицы точек входа
; в подпрограммы - интерпретаторы вершин графа
				ADR r0, TAB_ADDR
; Считать из таблицы адрес интерпретатора, номер которого
; уже загружен в регистр r2
; Попутный авто-расчет смещения по таблице offset=(r2)*4
				LDR r3,[r0, r2, LSL #2]
; Косвенный вызов подпрограммы по ее начальному адресу
				BLX r3
;				...
; Повторить цикл дискретного управляющего автомата
				B DISK_AVT

; Подпрограмма интерпретатора вершины 0 графа
INT_0

; Проверить все условия перехода в порядке приоритета
; Компоненты вектора X сохранены в регистре r1
; Условие 1: (x0+x2)∙(/x5) ∙(/x1) ∙(/x3)
				LSL r0,r1,#(31-0)		; Загрузка x0 в битовый аккумулятор
				ORR r0,r1,LSL #(31-2)	;(x0+x2)
				BIC r0,r1,LSL #(31-5)	; ∙(/x5)
				BIC r0,r1,LSL #(31-1)	; ∙(/x1)
				BICS r0,r1,LSL #(31-3)	; ∙(/x3) и выставить флаги
; Если условие истинно, сменить номер состояния N=1
; и выдать управляющее воздействие Y=4
				LDRMI r0,=N
				MOVMI r3,#1
				MOVMI r4,#4
				STRDMI r3,r4,[r0]	; Сохранить сразу два слова N,Y
; Досрочный выход из подпрограммы INT_0				
				BXMI lr				; Остальные условия не проверять!
									
; Условие 2: x1∙(/x5) ∙(/x2) ∙(/x4)
				LSL r0,r1,#(31-1)		; Загрузка x1 в битовый аккумулятор
				BIC r0,r1,LSL #(31-5)	; ∙(/x5)
				BIC r0,r1,LSL #(31-2)	; ∙(/x2)
				BICS r0,r1,LSL #(31-4)	; ∙(/x4). Выставить флаги
; Если условие истинно, сменить номер состояния N=2
; и выдать управляющее воздействие Y=2
				LDRMI r0,=N
				MOVMI r3,#2
				STRDMI r3, r3,[r0]	; Сохранить сразу два слова N,Y
				
; Больше условий перехода нет, завершить подпрограмму
				BX lr				
				
; Подпрограмма интерпретатора вершины 1 графа
INT_1

; Проверить все условия перехода в порядке приоритета
; Все компоненты вектора входа сохранены в регистре r1
; Условие перехода 1: x3+x1∙x2
				LSL r0,r1,#(31-1)		; Загрузка x1 в битовый аккумулятор
				AND r0,r1,LSL #(31-2)	; x1∙x2
				ORRS r0,r1,LSL #(31-3)	; x1∙x2	+ x3 . Выставить флаги	
; Если условие истинно, сменить номер состояния N=3
; и выдать управляющее воздействие Y=1
				LDRMI r0,=N
				MOVMI r3,#3
				MOVMI r4,#1
				STRDMI r3, r4,[r0]	; Сохранить сразу два слова N,Y
; Досрочный выход из подпрограммы INT_1				
				BXMI lr				; Остальные условия не проверять!
						
; Условие перехода 2: x1+x5			
				LSL r0,r1,#(31-1)		; Загрузка x1 в битовый аккумулятор
				ORRS r0,r1,LSL #(31-5)	; x1 + x5 . Выставить флаги	
; Если условие истинно, сменить номер состояния N=0
; и выдать управляющее воздействие Y=0
				MOVMI r1,#0
				LDRMI r0,=N
				STRDMI r1, r1,[r0]	; Сохранить два слова N,Y
				
; Больше условий перехода нет, завершить подпрограмму
				BX lr					
								
; Подпрограмма интерпретатора вершины 2 графа
INT_2

; Проверить все условия перехода в порядке приоритета
; Условие перехода 1: x4+x1∙x2
				LSL r0,r1,#(31-1)		; Загрузка x1 в битовый аккумулятор
				AND r0,r1,LSL #(31-2)	; x1∙x2
				ORRS r0,r1,LSL #(31-4)	; x1∙x2	+ x4 . Выставить флаги	
; Если условие истинно, сменить номер состояния N=3
; и выдать управляющее воздействие Y=1
				LDRMI r0,=N
				MOVMI r3,#3
				MOVMI r4,#1
				STRDMI r3, r4,[r0]	; Сохранить сразу два слова N,Y
; Досрочный выход из подпрограммы INT_2				
				BXMI lr				; Остальные условия не проверять!
				
; Условие перехода 2: x2+x5
				LSL r0,r1,#(31-2)		; Загрузка x2 в битовый аккумулятор
				ORRS r0,r1,LSL #(31-5)	; x1 + x5 . Выставить флаги	
; Если условие истинно, сменить номер состояния N=0
; и выдать управляющее воздействие Y=0
				MOVMI r1,#0
				LDRMI r0,=N
				STRDMI r1, r1,[r0]	; Сохранить сразу два слова N,Y
			
; Больше условий перехода нет, завершить подпрограмму
				BX lr				
				
; Подпрограмма интерпретатора веришны 3 графа
INT_3

; Проверить единственное условие перехода x5
; Загрузка x5 в битовый аккумулятор, установка флагов
				LSLS r0,r1,#(31-5)	
; Если условие истинно, сменить номер состояния N=0
; и выдать управляющее воздействие Y=0
				MOVMI r1,#0
				LDRMI r0,=N
				STRDMI r1, r1,[r0]	; Сохранить сразу два слова N,Y
				
; Больше условий перехода нет, завершить подпрограмму
				BX lr			

; Выравнивание кодовой памяти по границе полного слова
; для размещения начальных адресов подпрограмм
				ALIGN
; Таблица начальных адресов интерпретаторов вершин графа
TAB_ADDR
				DCD INT_0
				DCD INT_1	
				DCD INT_2
				DCD INT_3

; Выравнивние адресов переменных в памяти данных
				ALIGN
; Объявление секции данных в ОЗУ
				AREA MyData13, DATA, ReadWrite
; Резервирование слов под 
; вектор входа X, вектор выхода Y
; и номер текущего состояния автомата N
X				SPACE 4
N				SPACE 4
Y				SPACE 4

; Конец ассемблерного текста
				END