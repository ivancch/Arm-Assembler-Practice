; Объявить кодовую секцию MyCode
			AREA MyCode, CODE, ReadOnly
; Объявить точку входа в программу приложения	
			ENTRY
; Объвить точку входа глобальной переменной
			EXPORT CopyRomRamWithLoop
CopyRomRamWithLoop
; Обявить и присвоить значение переменной N_32
; "Число слов в массиве"
N_32 		EQU 4
; Загрузить параметры и вызвать подпрограмму 
; копирования массива слов
			ADR r0, A_ROM
			LDR r1, =A_RAM
			MOV r2, #N_32
			
		; Вариант 1
		; Выгрузка по слову
;			B Copy_Rom_Ram1
			
		; Вариант 2
		; Выгрузка по полуслову
		; Умножаем число элементов на 2
		; потому что перебираем полуслова
;			MOV r2, r2, LSL #1 ; N_32 * 2
;			B Copy_Rom_Ram2

		; Вариант 3
		; Выгрузка по байту
		; Умножаем число элементов на 4
		; потому что перебираем байты
;			MOV r2, r2, LSL #2 ; N_32 * 4
;			B Copy_Rom_Ram3
		
		; Вариант 4
		; Перестровить логику цикла
		; с пре-проверкой условия
;			B Copy_Rom_Ram4
			
		; Вариант 5
		; Считать двойные слова, сложить их,
		; и сохранить в оперативную память
			LDR r3, =Result_of_addition
			MOV r2, r2, LSR #1 ; N_32 / 2
			B Copy_Rom_Ram5

; Зарезервируйте в кодовой секции строку символов “Privet ARM Cortex-M4F CPU” c
; использованием директивы DCB. В качестве признака конца строки (прерывателя 
; строки) используйте нулевой байт 0. Напишите подпрограмму копирования в ОЗУ 
; строки символов любой длины, кончающейся «прерывателем». Проверьте ее 
; работу в отладчике. 
;			ADR r0, ROM_string1
;			LDR r1, =RAM_string1
;			B Copy_Rom_Ram6
			
Back
; Выход из программы
			BX lr
; ********************************************
; Подпрограмма копирования слов из ПЗУ в ОЗУ
; Входные параметры:
; r0 - начальный адрес массива слов в ПЗУ
; r1 - начальный адрес массива слов в ОЗУ
; r2 - число элементов массива
; Используемые регистры:
; r3 - для временного хранения слов
; ********************************************
; Точка входа в подпрограмму
Copy_Rom_Ram1
; Cчитать текущее слово из ПЗУ и сохранить в ОЗУ
; с использованием базовой адресации с пост-смещением
			LDR r3, [r0], #4
			STR r3, [r1], #4
; Декрементировать счетчик числа элементов массива
			SUB r2, #1
; Сравнить с нулем (все ли слова скопированы?)
			CMP r2, #0
; Если не все - повторить операцию копирования
			BNE Copy_Rom_Ram1
; Все слова скопированы, возврат в основную программу
			B Back
; ***** Конец Варианта 1  *****
; ***** Начало Варианта 2 *****
Copy_Rom_Ram2
			LDRH r3, [r0], #2
			STRH r3, [r1], #2
			SUB r2, #1
			CMP r2, #0
			BNE Copy_Rom_Ram2
; Все слова скопированы, возврат в основную программу
			B Back
; ***** Конец Варианта 2  *****
; ***** Начало Варианта 3 *****
Copy_Rom_Ram3
			LDRB r3, [r0], #1
			STRB r3, [r1], #1
			SUB r2, #1
			CMP r2, #0
			BNE Copy_Rom_Ram3
			B Back
; ***** Конец Варианта 3  *****
; ***** Начало Варианта 4 *****
Copy_Rom_Ram4
; Загрузить в регистр временного хранения r3
; текущее число нескопированных элементов массива
; c установкой флагов (суффикс "S")
			MOVS r3, r2
; Если все элементы скопированы, выйти из подпрограммы
			BEQ Back
; Cчитать текущий байт из ПЗУ и сохранить в ОЗУ
; с использованием базовой адресации с пост-смещением
			LDR r3, [r0], #4
			STR r3, [r1], #4
; Декрементировать счетчик числа элементов массива
			SUB r2, #1
; Переход в начало подпрограммы
			B Copy_Rom_Ram4
; ***** Конец Варианта 4  *****
; ***** Начало Варианта 5 *****
Copy_Rom_Ram5
; Проверка на условие выполнения цикла
			MOVS r2, r2
			BEQ Back
; Логика программы: считывание, копирование
; И сложение между собой двойных слов
			LDRD r4, r5, [r0], #8
			STRD r4, r5, [r1], #8
			ADD  r6, r4, r5
			STR r6, [r3], #4
			SUB r2, #1
			B Copy_Rom_Ram5
; ***** Конец Варианта 5  *****
; ***** Начало Варианта 6 *****
Copy_Rom_Ram6
			LDRB r2, [r0], #1
			STRB r2, [r1], #1
			CMP r2, #0
			BEQ Back
			B Copy_Rom_Ram6
; ***** Конец Варианта 6  *****

			ALIGN

; Инициализация констант в текущей кодовой секции
A_ROM
Const_0 DCD 0x7788FFAA
Const_1 DCD 0x22221111
Const_2 DCW 34,35
Condt_3 DCB 1,2,3,4

ROM_string1 DCB "Privet ARM Cortex-M4F CPU", 0
			ALIGN
				
; Объявить секцию данных в оперативной памяти
			AREA MyData, DATA, ReadWrite
; Зарезервировать в ней 100 слов
A_RAM		SPACE 4*N_32 ; Для 4-х констат
Result_of_addition 
			SPACE 2*N_32 ; Для результата сложения
RAM_string1 SPACE 102	 ; Для текста string1
; Конец ассемблерного текста
			END
