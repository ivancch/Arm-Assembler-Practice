<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\AssemblerPractice.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\AssemblerPractice.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Tue Apr  4 20:26:55 2023
<BR><P>
<H3>Maximum Stack Usage =          0 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>

<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2]">Main</a>
 <LI><a href="#[f]">SimpleOperations</a>
 <LI><a href="#[10]">_32bitConst</a>
 <LI><a href="#[20]">ForcedReservationLTORG</a>
 <LI><a href="#[19]">ReservationDirective</a>
 <LI><a href="#[11]">IndirectAddressing</a>
 <LI><a href="#[12]">CopyRomRamWithLoop</a>
 <LI><a href="#[1a]">BitwiseOpAndShifts</a>
 <LI><a href="#[1b]">LogicController</a>
 <LI><a href="#[16]">LogicContrTestBits</a>
 <LI><a href="#[17]">DiscreteContrMachine</a>
 <LI><a href="#[1d]">DiscreteContrMachine_V2</a>
 <LI><a href="#[18]">BitAddressableRegisters_V1</a>
 <LI><a href="#[1c]">BitAddressableRegisters_V2</a>
 <LI><a href="#[3]">StackTesting</a>
 <LI><a href="#[13]">OperationsAddAndSub</a>
 <LI><a href="#[14]">AddAndSubDWord</a>
 <LI><a href="#[15]">ArithmeticOpWithLDM_STM</a>
 <LI><a href="#[1e]">MUL_U32_U32</a>
 <LI><a href="#[1f]">MUL_S32_S32</a>
 <LI><a href="#[4]">Next</a>
 <LI><a href="#[d]">BackLinkV1</a>
 <LI><a href="#[e]">BackLinkV2</a>
 <LI><a href="#[5]">INT_0</a>
 <LI><a href="#[6]">INT_1</a>
 <LI><a href="#[7]">INT_2</a>
 <LI><a href="#[8]">INT_3</a>
 <LI><a href="#[9]">INT_0</a>
 <LI><a href="#[a]">INT_1</a>
 <LI><a href="#[b]">INT_2</a>
 <LI><a href="#[c]">INT_3</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1e]">MUL_U32_U32</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">MUL_U32_U32</a><BR>
 <LI><a href="#[1b]">LogicController</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">LogicController</a><BR>
 <LI><a href="#[18]">BitAddressableRegisters_V1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">BitAddressableRegisters_V1</a><BR>
 <LI><a href="#[1c]">BitAddressableRegisters_V2</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">BitAddressableRegisters_V2</a><BR>
 <LI><a href="#[1f]">MUL_S32_S32</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">MUL_S32_S32</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">BackLinkV1</a> from 9arithmeticopwithldm-stm.o(MyCode9) referenced from 9arithmeticopwithldm-stm.o(MyCode9)
 <LI><a href="#[e]">BackLinkV2</a> from 9arithmeticopwithldm-stm.o(MyCode9) referenced from 9arithmeticopwithldm-stm.o(MyCode9)
 <LI><a href="#[5]">INT_0</a> from 13discretecontrmachine.o(MyCode13) referenced from 13discretecontrmachine.o(MyCode13)
 <LI><a href="#[9]">INT_0</a> from 13discretecontrmachinev2.o(MyCode13_2) referenced from 13discretecontrmachinev2.o(MyCode13_2)
 <LI><a href="#[6]">INT_1</a> from 13discretecontrmachine.o(MyCode13) referenced from 13discretecontrmachine.o(MyCode13)
 <LI><a href="#[a]">INT_1</a> from 13discretecontrmachinev2.o(MyCode13_2) referenced from 13discretecontrmachinev2.o(MyCode13_2)
 <LI><a href="#[7]">INT_2</a> from 13discretecontrmachine.o(MyCode13) referenced from 13discretecontrmachine.o(MyCode13)
 <LI><a href="#[b]">INT_2</a> from 13discretecontrmachinev2.o(MyCode13_2) referenced from 13discretecontrmachinev2.o(MyCode13_2)
 <LI><a href="#[8]">INT_3</a> from 13discretecontrmachine.o(MyCode13) referenced from 13discretecontrmachine.o(MyCode13)
 <LI><a href="#[c]">INT_3</a> from 13discretecontrmachinev2.o(MyCode13_2) referenced from 13discretecontrmachinev2.o(MyCode13_2)
 <LI><a href="#[2]">Main</a> from main.o(MyCode) referenced from startup1.o(.text)
 <LI><a href="#[1]">NMI_Handler</a> from nmi.o(.text) referenced from startup1.o(RESET)
 <LI><a href="#[4]">Next</a> from 3forcedreservationltorg.o(MyCode) referenced from 3forcedreservationltorg.o(MyCode)
 <LI><a href="#[0]">Reset_Handler</a> from startup1.o(.text) referenced from startup1.o(RESET)
 <LI><a href="#[3]">StackTesting</a> from 15stacktesting.o(MyCode15) referenced from main.o(MyCode)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup1.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nmi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup1.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>Main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, main.o(MyCode))
<BR>[Address Reference Count : 1]<UL><LI> startup1.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>SimpleOperations</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 1simpleoperations.o(MyCode))

<P><STRONG><a name="[10]"></a>_32bitConst</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 2_32bitconst.o(MyCode))

<P><STRONG><a name="[20]"></a>ForcedReservationLTORG</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 3forcedreservationltorg.o(MyCode), UNUSED)

<P><STRONG><a name="[19]"></a>ReservationDirective</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 4reservationdirective.o(MyCode))

<P><STRONG><a name="[11]"></a>IndirectAddressing</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 5indirectaddressing.o(MyCode))

<P><STRONG><a name="[12]"></a>CopyRomRamWithLoop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6copyrom-ramwithloop.o(MyCode))

<P><STRONG><a name="[1a]"></a>BitwiseOpAndShifts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 10bitwiseopandshifts.o(MyCode10))

<P><STRONG><a name="[1b]"></a>LogicController</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 11logiccontroller.o(MyCode11))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicController
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicController
</UL>

<P><STRONG><a name="[16]"></a>LogicContrTestBits</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 12logiccontrtestbits.o(MyCode11))

<P><STRONG><a name="[17]"></a>DiscreteContrMachine</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 13discretecontrmachine.o(MyCode13))

<P><STRONG><a name="[1d]"></a>DiscreteContrMachine_V2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 13discretecontrmachinev2.o(MyCode13_2))

<P><STRONG><a name="[18]"></a>BitAddressableRegisters_V1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 14bitaddressableregistersv1.o(MyCode14_1))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitAddressableRegisters_V1
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitAddressableRegisters_V1
</UL>

<P><STRONG><a name="[1c]"></a>BitAddressableRegisters_V2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 14bitaddressableregistersv2.o(MyCode14_2))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitAddressableRegisters_V2
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitAddressableRegisters_V2
</UL>

<P><STRONG><a name="[3]"></a>StackTesting</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 15stacktesting.o(MyCode15))
<BR>[Address Reference Count : 1]<UL><LI> main.o(MyCode)
</UL>
<P><STRONG><a name="[13]"></a>OperationsAddAndSub</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 7operationsaddandsub.o(MyCode7))

<P><STRONG><a name="[14]"></a>AddAndSubDWord</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 8addandsubdwordmacro.o(MyCode8))

<P><STRONG><a name="[15]"></a>ArithmeticOpWithLDM_STM</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 9arithmeticopwithldm-stm.o(MyCode9))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUL_U32_U32
</UL>

<P><STRONG><a name="[1e]"></a>MUL_U32_U32</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, mult32us.o(MyCodeMULT))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUL_U32_U32
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUL_U32_U32
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArithmeticOpWithLDM_STM
</UL>

<P><STRONG><a name="[1f]"></a>MUL_S32_S32</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, mult32us.o(MyCodeMULT))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUL_S32_S32
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUL_S32_S32
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackLinkV1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4]"></a>Next</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 3forcedreservationltorg.o(MyCode))
<BR>[Address Reference Count : 1]<UL><LI> 3forcedreservationltorg.o(MyCode)
</UL>
<P><STRONG><a name="[d]"></a>BackLinkV1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 9arithmeticopwithldm-stm.o(MyCode9))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUL_S32_S32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 9arithmeticopwithldm-stm.o(MyCode9)
</UL>
<P><STRONG><a name="[e]"></a>BackLinkV2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 9arithmeticopwithldm-stm.o(MyCode9))
<BR>[Address Reference Count : 1]<UL><LI> 9arithmeticopwithldm-stm.o(MyCode9)
</UL>
<P><STRONG><a name="[5]"></a>INT_0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 13discretecontrmachine.o(MyCode13))
<BR>[Address Reference Count : 1]<UL><LI> 13discretecontrmachine.o(MyCode13)
</UL>
<P><STRONG><a name="[6]"></a>INT_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 13discretecontrmachine.o(MyCode13))
<BR>[Address Reference Count : 1]<UL><LI> 13discretecontrmachine.o(MyCode13)
</UL>
<P><STRONG><a name="[7]"></a>INT_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 13discretecontrmachine.o(MyCode13))
<BR>[Address Reference Count : 1]<UL><LI> 13discretecontrmachine.o(MyCode13)
</UL>
<P><STRONG><a name="[8]"></a>INT_3</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 13discretecontrmachine.o(MyCode13))
<BR>[Address Reference Count : 1]<UL><LI> 13discretecontrmachine.o(MyCode13)
</UL>
<P><STRONG><a name="[9]"></a>INT_0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 13discretecontrmachinev2.o(MyCode13_2))
<BR>[Address Reference Count : 1]<UL><LI> 13discretecontrmachinev2.o(MyCode13_2)
</UL>
<P><STRONG><a name="[a]"></a>INT_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 13discretecontrmachinev2.o(MyCode13_2))
<BR>[Address Reference Count : 1]<UL><LI> 13discretecontrmachinev2.o(MyCode13_2)
</UL>
<P><STRONG><a name="[b]"></a>INT_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 13discretecontrmachinev2.o(MyCode13_2))
<BR>[Address Reference Count : 1]<UL><LI> 13discretecontrmachinev2.o(MyCode13_2)
</UL>
<P><STRONG><a name="[c]"></a>INT_3</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 13discretecontrmachinev2.o(MyCode13_2))
<BR>[Address Reference Count : 1]<UL><LI> 13discretecontrmachinev2.o(MyCode13_2)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
